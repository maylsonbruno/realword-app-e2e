{"version":3,"file":"C:/Users/full/Desktop/RealWordApp/cypress-realworld-app/src/utils/transactionUtils.ts","sources":["C:/Users/full/Desktop/RealWordApp/cypress-realworld-app/src/utils/transactionUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Transaction,\r\n  User,\r\n  TransactionRequestStatus,\r\n  NotificationType,\r\n  PaymentNotificationStatus,\r\n  TransactionResponseItem,\r\n  TransactionQueryPayload,\r\n  TransactionDateRangePayload,\r\n  TransactionAmountRangePayload,\r\n  LikeNotification,\r\n  CommentNotification,\r\n} from \"../models\";\r\nimport { faker } from \"@faker-js/faker\";\r\nimport Dinero from \"dinero.js\";\r\nimport {\r\n  flow,\r\n  get,\r\n  isEmpty,\r\n  negate,\r\n  curry,\r\n  isEqual,\r\n  join,\r\n  pick,\r\n  values,\r\n  has,\r\n  find,\r\n  omit,\r\n  map,\r\n  drop,\r\n} from \"lodash/fp\";\r\n\r\nexport const isRequestTransaction = (transaction: Transaction) =>\r\n  flow(get(\"requestStatus\"), negate(isEmpty))(transaction);\r\n\r\n/* istanbul ignore next */\r\nexport const isPendingRequestTransaction = (transaction: Transaction) =>\r\n  flow(get(\"requestStatus\"), isEqual(TransactionRequestStatus.pending))(transaction);\r\n\r\n/* istanbul ignore next */\r\nexport const isAcceptedRequestTransaction = (transaction: Transaction) =>\r\n  flow(get(\"requestStatus\"), isEqual(TransactionRequestStatus.accepted))(transaction);\r\n\r\n/* istanbul ignore next */\r\nexport const isRejectedRequestTransaction = (transaction: Transaction) =>\r\n  flow(get(\"requestStatus\"), isEqual(TransactionRequestStatus.rejected))(transaction);\r\n\r\nexport const isPayment = negate(isRequestTransaction);\r\n\r\n/* istanbul ignore next */\r\nexport const getFakeAmount = (min: number = 1000, max: number = 50000) =>\r\n  parseInt(faker.finance.amount(min, max), 10);\r\n\r\n/* istanbul ignore next */\r\nexport const formatAmount = (amount: number) => Dinero({ amount }).toFormat();\r\n\r\n/* istanbul ignore next */\r\nexport const formatAmountSlider = (amount: number) => Dinero({ amount }).toFormat(\"$0,0\");\r\n\r\nexport const payAppDifference = curry((sender: User, transaction: Transaction) =>\r\n  Dinero({ amount: get(\"balance\", sender) }).subtract(\r\n    Dinero({ amount: get(\"amount\", transaction) })\r\n  )\r\n);\r\n\r\nexport const payAppAddition = curry((sender: User, transaction: Transaction) =>\r\n  Dinero({ amount: get(\"balance\", sender) }).add(Dinero({ amount: get(\"amount\", transaction) }))\r\n);\r\n\r\nexport const getChargeAmount = (sender: User, transaction: Transaction) =>\r\n  Math.abs(payAppDifference(sender, transaction).getAmount());\r\n\r\nexport const getTransferAmount = curry((sender: User, transaction: Transaction) =>\r\n  Math.abs(payAppDifference(sender, transaction).getAmount())\r\n);\r\n\r\nexport const getPayAppCreditedAmount = (receiver: User, transaction: Transaction) =>\r\n  Math.abs(payAppAddition(receiver, transaction).getAmount());\r\n\r\nexport const hasSufficientFunds = (sender: User, transaction: Transaction) =>\r\n  payAppDifference(sender, transaction).isPositive();\r\n\r\n/* istanbul ignore next */\r\nexport const receiverIsCurrentUser = (currentUser: User, transaction: Transaction) =>\r\n  isEqual(get(\"id\", currentUser), get(\"receiverId\", transaction));\r\n\r\nexport const formatFullName = (user: User) =>\r\n  flow(pick([\"firstName\", \"lastName\"]), values, join(\" \"))(user);\r\n\r\nexport const isCommentNotification = (\r\n  notification: NotificationType\r\n): notification is CommentNotification => has(\"commentId\")(notification);\r\n\r\nexport const isLikeNotification = (\r\n  notification: NotificationType\r\n): notification is LikeNotification => has(\"likeId\")(notification);\r\n\r\nexport const isPaymentNotification = (notification: NotificationType) =>\r\n  has(\"status\")(notification);\r\n\r\n/* istanbul ignore next */\r\nexport const isPaymentRequestedNotification = (notification: NotificationType) =>\r\n  flow(get(\"status\"), isEqual(PaymentNotificationStatus.requested))(notification);\r\n\r\n/* istanbul ignore next */\r\nexport const isPaymentReceivedNotification = (notification: NotificationType) =>\r\n  flow(get(\"status\"), isEqual(PaymentNotificationStatus.received))(notification);\r\n\r\n/* istanbul ignore next */\r\nexport const currentUserLikesTransaction = (\r\n  currentUser: User,\r\n  transaction: TransactionResponseItem\r\n) =>\r\n  flow(\r\n    find((like) => flow(get(\"userId\"), isEqual(get(\"id\", currentUser)))(like)),\r\n    negate(isEmpty)\r\n  )(transaction.likes);\r\n\r\nexport const hasDateQueryFields = (query: TransactionQueryPayload | TransactionDateRangePayload) =>\r\n  has(\"dateRangeStart\", query) && has(\"dateRangeEnd\", query);\r\n\r\nexport const getDateQueryFields = (query: TransactionDateRangePayload) =>\r\n  pick([\"dateRangeStart\", \"dateRangeEnd\"], query);\r\n\r\nexport const omitDateQueryFields = (query: TransactionQueryPayload) =>\r\n  omit([\"dateRangeStart\", \"dateRangeEnd\"], query);\r\n\r\nexport const hasAmountQueryFields = (\r\n  query: TransactionQueryPayload | TransactionAmountRangePayload\r\n) => has(\"amountMin\", query) && has(\"amountMax\", query);\r\n\r\nexport const getAmountQueryFields = (query: TransactionAmountRangePayload) =>\r\n  pick([\"amountMin\", \"amountMax\"], query);\r\n\r\nexport const omitAmountQueryFields = (query: TransactionQueryPayload) =>\r\n  omit([\"amountMin\", \"amountMax\"], query);\r\n\r\n/* istanbul ignore next */\r\nexport const hasPaginationQueryFields = (\r\n  query: TransactionQueryPayload | TransactionAmountRangePayload\r\n) => has(\"page\", query) && has(\"limit\", query);\r\n\r\nexport const omitPaginationQueryFields = (query: TransactionQueryPayload) =>\r\n  omit([\"page\", \"limit\"], query);\r\n\r\n/* istanbul ignore next */\r\nexport const getQueryWithoutDateFields = (query: TransactionQueryPayload) =>\r\n  query && hasDateQueryFields(query) ? omitDateQueryFields(query) : query;\r\n\r\n/* istanbul ignore next */\r\nexport const getQueryWithoutAmountFields = (query: TransactionQueryPayload) =>\r\n  query && hasAmountQueryFields(query) ? omitAmountQueryFields(query) : query;\r\n\r\nexport const getQueryWithoutFilterFields = (query: TransactionQueryPayload) =>\r\n  flow(omitAmountQueryFields, omitDateQueryFields, omitPaginationQueryFields)(query);\r\n\r\n/* istanbul ignore next */\r\nexport const padAmountWithZeros = (number: number) => Math.ceil(number * 1000);\r\n\r\n/* istanbul ignore next */\r\nexport const amountRangeValueText = (value: number) =>\r\n  flow(padAmountWithZeros, formatAmount)(value);\r\n\r\n/* istanbul ignore next */\r\nexport const amountRangeValueTextLabel = (value: number) =>\r\n  /* istanbul ignore next */\r\n  flow(padAmountWithZeros, formatAmountSlider)(value);\r\n\r\n/* istanbul ignore next */\r\nexport const formatAmountRangeValues = (amountRangeValues: number[]) =>\r\n  /* istanbul ignore next */\r\n  flow(map(padAmountWithZeros), map(formatAmountSlider), join(\" - \"))(amountRangeValues);\r\n\r\nexport const getPaginatedItems = (page: number, limit: number, items: any) => {\r\n  const offset = (page - 1) * limit;\r\n  const pagedItems = drop(offset, items).slice(0, limit);\r\n\r\n  return {\r\n    totalPages: Math.ceil(items.length / limit),\r\n    data: pagedItems,\r\n  };\r\n};\r\n\r\n// Custom UTC functions per:\r\n// https://github.com/date-fns/date-fns/issues/376#issuecomment-544274031\r\n// not used in application code\r\n/* istanbul ignore next */\r\nexport const startOfDayUTC = (date: Date) => new Date(new Date(date).setUTCHours(0, 0, 0, 0));\r\n\r\n// not used in application code\r\n/* istanbul ignore next */\r\nexport const endOfDayUTC = (date: Date) => new Date(new Date(date).setUTCHours(23, 59, 59, 999));\r\n"]}
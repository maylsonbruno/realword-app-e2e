{"version":3,"file":"C:/Users/full/Desktop/RealWordApp/cypress-realworld-app/backend/transaction-routes.ts","sources":["C:/Users/full/Desktop/RealWordApp/cypress-realworld-app/backend/transaction-routes.ts"],"names":[],"mappings":"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","sourcesContent":["///<reference path=\"types.ts\" />\r\n\r\nimport express from \"express\";\r\nimport { remove, isEmpty, slice, concat } from \"lodash/fp\";\r\nimport {\r\n  getTransactionsForUserContacts,\r\n  createTransaction,\r\n  updateTransactionById,\r\n  getPublicTransactionsDefaultSort,\r\n  getTransactionByIdForApi,\r\n  getTransactionsForUserForApi,\r\n  getPublicTransactionsByQuery,\r\n} from \"./database\";\r\nimport { ensureAuthenticated, validateMiddleware } from \"./helpers\";\r\nimport {\r\n  sanitizeTransactionStatus,\r\n  sanitizeRequestStatus,\r\n  isTransactionQSValidator,\r\n  isTransactionPayloadValidator,\r\n  shortIdValidation,\r\n  isTransactionPatchValidator,\r\n  isTransactionPublicQSValidator,\r\n} from \"./validators\";\r\nimport { getPaginatedItems } from \"../src/utils/transactionUtils\";\r\nconst router = express.Router();\r\n\r\n// Routes\r\n\r\n//GET /transactions - scoped user, auth-required\r\nrouter.get(\r\n  \"/\",\r\n  ensureAuthenticated,\r\n  validateMiddleware([\r\n    sanitizeTransactionStatus,\r\n    sanitizeRequestStatus,\r\n    ...isTransactionQSValidator,\r\n  ]),\r\n  (req, res) => {\r\n    /* istanbul ignore next */\r\n    const transactions = getTransactionsForUserForApi(req.user?.id!, req.query);\r\n\r\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\r\n      req.query.page as unknown as number,\r\n      req.query.limit as unknown as number,\r\n      transactions\r\n    );\r\n\r\n    res.status(200);\r\n    res.json({\r\n      pageData: {\r\n        page: res.locals.paginate.page,\r\n        limit: res.locals.paginate.limit,\r\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\r\n        totalPages,\r\n      },\r\n      results: paginatedItems,\r\n    });\r\n  }\r\n);\r\n\r\n//GET /transactions/contacts - scoped user, auth-required\r\nrouter.get(\r\n  \"/contacts\",\r\n  ensureAuthenticated,\r\n  validateMiddleware([\r\n    sanitizeTransactionStatus,\r\n    sanitizeRequestStatus,\r\n    ...isTransactionQSValidator,\r\n  ]),\r\n  (req, res) => {\r\n    /* istanbul ignore next */\r\n    const transactions = getTransactionsForUserContacts(req.user?.id!, req.query);\r\n\r\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\r\n      req.query.page as unknown as number,\r\n      req.query.limit as unknown as number,\r\n      transactions\r\n    );\r\n\r\n    res.status(200);\r\n    res.json({\r\n      pageData: {\r\n        page: res.locals.paginate.page,\r\n        limit: res.locals.paginate.limit,\r\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\r\n        totalPages,\r\n      },\r\n      results: paginatedItems,\r\n    });\r\n  }\r\n);\r\n\r\n//GET /transactions/public - auth-required\r\nrouter.get(\r\n  \"/public\",\r\n  ensureAuthenticated,\r\n  validateMiddleware(isTransactionPublicQSValidator),\r\n  (req, res) => {\r\n    const isFirstPage = (req.query.page as unknown as number) === 1;\r\n\r\n    /* istanbul ignore next */\r\n    let transactions = !isEmpty(req.query)\r\n      ? getPublicTransactionsByQuery(req.user?.id!, req.query)\r\n      : /* istanbul ignore next */\r\n        getPublicTransactionsDefaultSort(req.user?.id!);\r\n\r\n    const { contactsTransactions, publicTransactions } = transactions;\r\n\r\n    let publicTransactionsWithContacts;\r\n\r\n    if (isFirstPage) {\r\n      const firstFiveContacts = slice(0, 5, contactsTransactions);\r\n\r\n      publicTransactionsWithContacts = concat(firstFiveContacts, publicTransactions);\r\n    }\r\n\r\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\r\n      req.query.page as unknown as number,\r\n      req.query.limit as unknown as number,\r\n      isFirstPage ? publicTransactionsWithContacts : publicTransactions\r\n    );\r\n\r\n    res.status(200);\r\n    res.json({\r\n      pageData: {\r\n        page: res.locals.paginate.page,\r\n        limit: res.locals.paginate.limit,\r\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\r\n        totalPages,\r\n      },\r\n      results: paginatedItems,\r\n    });\r\n  }\r\n);\r\n\r\n//POST /transactions - scoped-user\r\nrouter.post(\r\n  \"/\",\r\n  ensureAuthenticated,\r\n  validateMiddleware(isTransactionPayloadValidator),\r\n  (req, res) => {\r\n    const transactionPayload = req.body;\r\n    const transactionType = transactionPayload.transactionType;\r\n\r\n    remove(\"transactionType\", transactionPayload);\r\n\r\n    /* istanbul ignore next */\r\n    const transaction = createTransaction(req.user?.id!, transactionType, transactionPayload);\r\n\r\n    res.status(200);\r\n    res.json({ transaction });\r\n  }\r\n);\r\n\r\n//GET /transactions/:transactionId - scoped-user\r\nrouter.get(\r\n  \"/:transactionId\",\r\n  ensureAuthenticated,\r\n  validateMiddleware([shortIdValidation(\"transactionId\")]),\r\n  (req, res) => {\r\n    const { transactionId } = req.params;\r\n\r\n    const transaction = getTransactionByIdForApi(transactionId);\r\n\r\n    res.status(200);\r\n    res.json({ transaction });\r\n  }\r\n);\r\n\r\n//PATCH /transactions/:transactionId - scoped-user\r\nrouter.patch(\r\n  \"/:transactionId\",\r\n  ensureAuthenticated,\r\n  validateMiddleware([shortIdValidation(\"transactionId\"), ...isTransactionPatchValidator]),\r\n  (req, res) => {\r\n    const { transactionId } = req.params;\r\n\r\n    /* istanbul ignore next */\r\n    updateTransactionById(transactionId, req.body);\r\n\r\n    res.sendStatus(204);\r\n  }\r\n);\r\n\r\nexport default router;\r\n"]}